;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname q4) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Exercise 19. Define the function string-insert, which consumes a string str plus a number i and inserts "_" at the ith position of str. Assume i is a number between 0 and the length of the given string (inclusive). See exercise 3 for ideas. Ponder how string-insert copes with "".
;; Goal: accepts string and a number i and inserts "_" at the ith position of the string. 

(require rackunit)
(require "extras.rkt")

(check-location "01" "q3.rkt")

(provide string-insert)

;; DATA DEFINITION: none.

;; string-insert: Str NonNegInt -> Str
;; GIVEN: a string str and a number i
;; WHERE: i is a number between 0 and the length of the given string
;; RETURNS: a new string with "_" inserted to the ith position of the old string
;; EXAMPLES:
;; (string-insert "helloworld" 5) = "hello_world"
;; (string-insert "helloworld" 0) = "_helloworld"
;; (string-insert "helloworld" 10) = "helloworld_"
;; (string-insert "" 0) = "_"
;; (string-insert " " 0) = "_ "
;; (string-insert " " 1) = " _"
;; STRATEGY: combine simpler functions

(define (string-insert str i)
 (string-append (substring str 0 i) "_" (substring str i)))


(begin-for-test
  (check-equal? (string-insert "helloworld" 5) "hello_world"
                "the new string with '_' inserted at position 5 for 'helloworld' should be 'hello_world'")
  (check-equal? (string-insert "helloworld" 0) "_helloworld"
                "the new string with '_' inserted at position 0 for 'helloworld' should be '_helloworld'")
  (check-equal? (string-insert "helloworld" 10) "helloworld_"
                "the new string with '_' inserted at position 10 for 'helloworld' should be 'helloworld_'")
  (check-equal? (string-insert "" 0) "_"
                "the new string with '_' inserted at position 0 for '' should be '_'")
  (check-equal? (string-insert " " 0) "_ "
                "the new string with '_' inserted at position 0 for ' ' should be '_ '")
  (check-equal? (string-insert " " 1) " _"
                "the new string with '_' inserted at position 1 for ' ' should be ' _'"))