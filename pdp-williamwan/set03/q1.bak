;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname q1) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Goal: Build a simple animation with two doodads moving around in a
;; rectangular enclosure.

(require rackunit)
(require "extras.rkt")
(require 2htdp/universe)
(require 2htdp/image)
(check-location "03" "q1.rkt")

(provide
  animation
  initial-world
  world-after-tick
  world-paused?
  world-after-key-event
  world-doodad-star
  world-doodad-square
  doodad-x
  doodad-y
  doodad-vx
  doodad-vy
  doodad-color)

;; DATA DEFINITIONS:

(define-struct doodad [x y vx vy color])
;; A Doodad is a structure:
;;  (make-doodad Integer Integer Integer Integer String)
;; INTERPRETATION:
;; x is the x-position of the Doodad
;; y is the y-position of the Doodad
;; vx is the x direction velocity of the Doodad
;; vy is the y direction velocity of the Doodad
;; color is the color of the Doodad

;; TEMPLATE:
;; doodad-fn : Doodad -> ??
#;
(define (doodad-fn d)
  (... (doodad-x d)
       (doodad-y d)
       (doodad-vx d)
       (doodad-vy d)
       (doodad-color d)))

;; Examples of Doodads, for testing
(define star-gold-at-top-left (make-doodad 1 1 -10 -12 "gold"))
(define star-green-at-top-right (make-doodad 600 1 10 -12 "green"))
(define star-blue-at-bottom-left (make-doodad 0 448 -10 12 "blue"))
(define square-gray-at-bottom-right (make-doodad 600 448 13 9 "gray"))
(define square-olivedrab-at-bottom (make-doodad 300 448 13 9 "olivedrab"))
(define square-khaki-at-top (make-doodad 300 1 13 -9 "khaki"))
(define square-orange-at-left (make-doodad 1 225 -13 9 "orange"))
(define square-crimson-at-right (make-doodad 600 225 13 9 "crimson"))
(define star-gold-at-center (make-doodad 300 225 10 12 "gold"))
;; initial Doodad of the RAD-STAR
(define RAD-STAR (make-doodad 125 120 10 12 "gold"))
;; initial Doodad of the SQUARE
(define SQUARE (make-doodad 460 350 13 -9 "gray"))


(define-struct world [doodad-star doodad-square paused?])
;; A World is a structure:
;;  (make-world Doodad Doodad Boolean)
;; INTERPRETATION:
;; doodad-star is the radial-star Doodad
;; doodad-square is the square Doodad
;; paused? describes whether or not the Doodad is paused.

;; TEMPLATE:
;; world-fn : World -> ??
#;
(define (world-fn w)
  (... (world-doodad-star w)
       (world-doodad-square w)
       (world-paused? w)))

;; Examples of worlds, for testing
(define unpaused-initial-world (make-world RAD-STAR SQUARE false))
(define paused-initial-world (make-world RAD-STAR SQUARE true))
(define unpaused-1 (make-world star-gold-at-top-left SQUARE false))
(define paused-1 (make-world star-gold-at-top-left SQUARE true))
(define unpaused-2 (make-world star-green-at-top-right
                               square-gray-at-bottom-right
                               false))
(define paused-2 (make-world star-green-at-top-right
                               square-gray-at-bottom-right
                               true))
(define unpaused-3 (make-world star-blue-at-bottom-left
                               square-olivedrab-at-bottom
                               false))
(define unpaused-4 (make-world RAD-STAR square-khaki-at-top false))
(define unpaused-5 (make-world RAD-STAR square-orange-at-left false))
(define unpaused-6 (make-world RAD-STAR square-crimson-at-right false))

;; END DATA DEFINITIONS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CONSTANTS:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; dimensions of the canvas
(define CANVAS-WIDTH 601)
(define CANVAS-HEIGHT 449)
(define EMPTY-CANVAS (empty-scene CANVAS-WIDTH CANVAS-HEIGHT))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helper functions:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; star-to-scene : World -> Scene
;; GIVEN: a World 
;; RETURNS: a Scene that portrays the given World.
;; EXAMPLE:
;; (star-to-scene unpaused-initial-world)
;;  = (place-image (radial-star 8 10 50 "solid" "gold") 125 120 EMPTY-CANVAS)
;; (star-to-scene paused-initial-world)
;;  = (place-image (radial-star 8 10 50 "solid" "gold") 125 120 EMPTY-CANVAS)
;; (star-to-scene unpaused-1)
;;  = (place-image (radial-star 8 10 50 "solid" "gold") 1 1 EMPTY-CANVAS)
;; STRATEGY: Use template for World on w

(define (star-to-scene w)
  (place-image (radial-star 8 10 50 "solid"
                            (doodad-color (world-doodad-star w)))
               (doodad-x (world-doodad-star w))
               (doodad-y (world-doodad-star w))
               EMPTY-CANVAS))


;; TESTS:
(begin-for-test
  (check-equal?
    (star-to-scene unpaused-initial-world)
    (place-image (radial-star 8 10 50 "solid" "gold") 125 120 EMPTY-CANVAS)
    "(star-to-scene unpaused-initial-world) returned incorrect image")

  (check-equal?
    (star-to-scene paused-initial-world)
    (place-image (radial-star 8 10 50 "solid" "gold") 125 120 EMPTY-CANVAS)
    "(star-to-scene paused-initial-world) returned incorrect image")

  (check-equal?
    (star-to-scene unpaused-1)
    (place-image (radial-star 8 10 50 "solid" "gold") 1 1 EMPTY-CANVAS)
    "(star-to-scene unpaused-1) returned incorrect image"))


;; world-to-scene : World -> Scene
;; GIVEN: a World 
;; RETURNS: a Scene that portrays the given world.
;; EXAMPLE:
;; (define unpaused-initial-star (place-image
;;                                (radial-star 8 10 50 "solid" "gold")
;;                                125 120 EMPTY-CANVAS))
;; (world-to-scene unpaused-initial-world)
;;  = (place-image (square 71 "solid" "gray") 460 350 unpaused-initial-star)
;; STRATEGY: Use template for World on w

(define (world-to-scene w)
  (place-image (square 71 "solid" (doodad-color (world-doodad-square w)))
               (doodad-x (world-doodad-square w))
               (doodad-y (world-doodad-square w))
               (star-to-scene w)))


;; TEST:
(define unpaused-initial-star (place-image
                              (radial-star 8 10 50 "solid" "gold")
                               125 120 EMPTY-CANVAS))
(begin-for-test
  (check-equal?
    (world-to-scene unpaused-initial-world)
    (place-image (square 71 "solid" "gray") 460 350 unpaused-initial-star)
    "(world-to-scene unpaused-initial-world) returned incorrect image"))


;; next-color: Color -> Color
;; GIVEN: a Color by DrRacket's image-color? predicate.
;; RETURNS: the next Color of the Doodad
;; EXAMPLE:
;; (next-color "gold") = "green"
;; (next-color "green") = "blue"
;; (next-color "blue") = "gold"
;; STRATEGY: combine simpler functions

(define (next-color color)
  (cond
    [(string=? color "gold") "green"]
    [(string=? color "green") "blue"]
    [(string=? color "blue") "gold"]
    [(string=? color "gray") "olivedrab"]
    [(string=? color "olivedrab") "khaki"]
    [(string=? color "khaki") "orange"]
    [(string=? color "orange") "crimson"]
    [(string=? color "crimson") "gray"]))


;; next-doodad: Doodad -> Doodad
;; GIVEN: a Doodad
;; RETURNS: the next Doodad follows the one given.
;; EXAMPLES:
;; (next-doodad star-gold-at-top-left) = (make-doodad 9 11 10 12 "green")
;; (next-doodad RAD-STAR) = (make-doodad 135 132 10 12 "gold")
;; (next-doodad square-orange-at-left) = (make-doodad 12 234 13 9 "crimson")
;; STRATEGY: Use template for Doodad on d

(define (next-doodad d)
  (cond
    [(and (< (+ (doodad-x d) (doodad-vx d)) 0)
          (< (+ (doodad-y d) (doodad-vy d)) 0))
     (make-doodad (abs (+ (doodad-x d) (doodad-vx d)))
                  (abs (+ (doodad-y d) (doodad-vy d)))
                  (- 0 (doodad-vx d))
                  (- 0 (doodad-vy d))
                  (next-color (doodad-color d)))]
    [(and (>= (+ (doodad-x d) (doodad-vx d)) 601)
          (< (+ (doodad-y d) (doodad-vy d)) 0))
     (make-doodad (- 1200 (+ (doodad-x d) (doodad-vx d)))
                  (abs (+ (doodad-y d) (doodad-vy d)))
                  (- 0 (doodad-vx d))
                  (- 0 (doodad-vy d))
                  (next-color (doodad-color d)))]
    [(and (>= (+ (doodad-x d) (doodad-vx d)) 601)
          (>= (+ (doodad-y d) (doodad-vy d)) 449))
     (make-doodad (- 1200 (+ (doodad-x d) (doodad-vx d)))
                  (- 896 (+ (doodad-y d) (doodad-vy d)))
                  (- 0 (doodad-vx d))
                  (- 0 (doodad-vy d))
                  (next-color (doodad-color d)))]
    [(and (< (+ (doodad-x d) (doodad-vx d)) 0)
          (>= (+ (doodad-y d) (doodad-vy d)) 449))
     (make-doodad (abs (+ (doodad-x d) (doodad-vx d)))
                  (- 896 (+ (doodad-y d) (doodad-vy d)))
                  (- 0 (doodad-vx d))
                  (- 0 (doodad-vy d))
                  (next-color (doodad-color d)))]
    [(and (< (+ (doodad-x d) (doodad-vx d)) 0)
          (and (< (+ (doodad-y d) (doodad-vy d)) 449)
          (>= (+ (doodad-y d) (doodad-vy d)) 0)))
     (make-doodad (abs (+ (doodad-x d) (doodad-vx d)))
                  (+ (doodad-y d) (doodad-vy d))
                  (- 0 (doodad-vx d))
                  (doodad-vy d)
                  (next-color (doodad-color d)))]
    [(and (>= (+ (doodad-x d) (doodad-vx d)) 601)
          (and (< (+ (doodad-y d) (doodad-vy d)) 449)
          (>= (+ (doodad-y d) (doodad-vy d)) 0)))
     (make-doodad (- 1200 (+ (doodad-x d) (doodad-vx d)))
                  (+ (doodad-y d) (doodad-vy d))
                  (- 0 (doodad-vx d))
                  (doodad-vy d)
                  (next-color (doodad-color d)))]
    [(and (< (+ (doodad-y d) (doodad-vy d)) 0)
          (and (< (+ (doodad-x d) (doodad-vx d)) 601)
          (>= (+ (doodad-x d) (doodad-vx d)) 0)))
     (make-doodad (+ (doodad-x d) (doodad-vx d))
                  (abs (+ (doodad-y d) (doodad-vy d)))
                  (doodad-vx d)
                  (- 0 (doodad-vy d))
                  (next-color (doodad-color d)))]
    [(and (>= (+ (doodad-y d) (doodad-vy d)) 449)
          (and (< (+ (doodad-x d) (doodad-vx d)) 601)
          (>= (+ (doodad-x d) (doodad-vx d)) 0)))
     (make-doodad (+ (doodad-x d) (doodad-vx d))
                  (- 896 (+ (doodad-y d) (doodad-vy d)))
                  (doodad-vx d)
                  (- 0 (doodad-vy d))
                  (next-color (doodad-color d)))]
    [else
     (make-doodad (+ (doodad-x d) (doodad-vx d))
                  (+ (doodad-y d) (doodad-vy d))
                  (doodad-vx d)
                  (doodad-vy d)
                  (doodad-color d))]))

;; TESTS:
(begin-for-test
  (check-equal? (next-doodad star-gold-at-top-left)
                (make-doodad 9 11 10 12 "green")
    "(next-doodad star-gold-at-top-left) should return
     (make-doodad 9 11 10 12 'green')")
  (check-equal? (next-doodad star-green-at-top-right)
                (make-doodad 590 11 -10 12 "blue")
    "(next-doodad star-green-at-top-right) should return
     (make-doodad 590 11 -10 12 'blue')")
  (check-equal? (next-doodad star-blue-at-bottom-left)
                (make-doodad 10 436 10 -12 "gold")
    "(next-doodad star-blue-at-bottom-left) should return
     (make-doodad 10 436 10 -12 'gold')")
  (check-equal? (next-doodad square-gray-at-bottom-right)
                (make-doodad 587 439 -13 -9 "olivedrab")
    "(next-doodad square-gray-at-bottom-right) should return
     (make-doodad 587 439 -13 -9 'olivedrab')")
  (check-equal? (next-doodad square-olivedrab-at-bottom)
                (make-doodad 313 439 13 -9 "khaki")
    "(next-doodad square-olivedrab-at-bottom) should return
     (make-doodad 313 439 13 -9 'khaki')")
  (check-equal? (next-doodad square-khaki-at-top)
                (make-doodad 313 8 13 9 "orange")
    "(next-doodad square-khaki-at-top) should return
     (make-doodad 313 8 13 9 'orange')")
  (check-equal? (next-doodad square-orange-at-left)
                (make-doodad 12 234 13 9 "crimson")
    "(next-doodad square-orange-at-left) should return
     (make-doodad 12 234 13 9 'crimson')")
  (check-equal? (next-doodad square-crimson-at-right)
                (make-doodad 587 234 -13 9 "gray")
    "(next-doodad square-crimson-at-right) should return
     (make-doodad 587 234 -13 9 'gray')")
  (check-equal? (next-doodad star-gold-at-center)
                (make-doodad 310 237 10 12 "gold")
    "(next-doodad star-gold-at-center) should return
     (make-doodad 310 237 10 12 'gold')"))


;; is-pause-key-event? : KeyEvent -> Boolean
;; GIVEN: a KeyEvent
;; RETURNS: true iff the KeyEvent represents a pause instruction
;; EXAMPLE:
;; (is-pause-key-event? " ") = true
;; (is-pause-key-event? "q") = false
;; STRATEGY: Combine simpler functions

(define (is-pause-key-event? ke)
  (key=? ke " "))

;; TESTS:
(begin-for-test
  (check-equal? (is-pause-key-event? " ") true
    "(is-pause-key-event? ' ') should return true")
  (check-equal? (is-pause-key-event? "q") false
    "(is-pause-key-event? 'q') should return false"))


;; world-with-paused-toggled : World -> World
;; GIVEN: A World.
;; RETURNS: a World just like the given one, but with paused? toggled
;; EXAMPLE:
;; (world-with-paused-toggled unpaused-initial-world) = paused-initial-world
;; (world-with-paused-toggled paused-1) = unpaused-1
;; STRATEGY: Use template for World on w
    
(define (world-with-paused-toggled w)
  (make-world
   (world-doodad-star w)
   (world-doodad-square w)
   (not (world-paused? w))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; animation function. start with (animation 1)

;; animation : PosReal -> World
;; GIVEN: the speed of the animation, in seconds per tick (so larger numbers
;;        run slower)
;; EFFECT: runs the animation, starting with the inital world as specified
;;         in the problem set.
;; RETURNS: the final state of the world
;; EXAMPLES:
;; (animation 1) runs the animation at normal speed
;; (animation 1/4) runs at a faster than normal speed
;; STRATEGY: combine simpler functions

(define (animation animation-speed)
  (big-bang (initial-world 0)
            (on-tick world-after-tick animation-speed)
            (on-key world-after-key-event)
            (on-draw world-to-scene)))


;; initial-world : Any -> World
;; GIVEN: any value (ignored)
;; RETURNS: the initial world specified for the animation
;; EXAMPLE:
;; (initial-world -174) = (make-world RAD-STAR SQUARE false)
;; STRATEGY: combine simpler functions

(define (initial-world anything)
  (make-world RAD-STAR SQUARE false))

;; TESTS:
(begin-for-test
  (check-equal? (initial-world -174) (make-world RAD-STAR SQUARE false)
    "(is-pause-key-event? ' ') should return true"))


;; world-after-tick : World -> World
;; GIVEN: a World that's possible for the animation
;; RETURNS: the World that should follow the given World after a tick.
;; EXAMPLES: 
;; moving:
;; (world-after-tick unpaused-initial-world)
;;  = (make-world (make-doodad 135 132 10 12 "gold")
;;                (make-doodad 473 341 13 -9 "gray") #false)
;; paused:
;; (world-after-tick paused-1)
;;  = (make-world (make-doodad 1 1 -10 -12 "gold")
;;                (make-doodad 460 350 13 -9 "gray") #true)

;; STRATEGY: Use template for World on w

(define (world-after-tick w)
  (if (world-paused? w)
      w
      (make-world (next-doodad (world-doodad-star w))
                  (next-doodad (world-doodad-square w))
                  (world-paused? w))))

;; TESTS:
(begin-for-test
  (check-equal? (world-after-tick unpaused-initial-world)
                (make-world (make-doodad 135 132 10 12 "gold")
                            (make-doodad 473 341 13 -9 "gray") #false)
    "(world-after-tick unpaused-initial-world) returned incorrect World.")
  (check-equal? (world-after-tick paused-initial-world)
                (make-world (make-doodad 125 120 10 12 "gold")
                            (make-doodad 460 350 13 -9 "gray") #true)
    "(world-after-tick paused-initial-world) returned incorrect World.")
  (check-equal? (world-after-tick unpaused-1)
                (make-world (make-doodad 9 11 10 12 "green")
                            (make-doodad 473 341 13 -9 "gray") #false)
    "(world-after-tick unpaused-1) returned incorrect World.")
  (check-equal? (world-after-tick paused-1)
                (make-world (make-doodad 1 1 -10 -12 "gold")
                            (make-doodad 460 350 13 -9 "gray") #true)
    "(world-after-tick paused-1) returned incorrect World.")
  (check-equal? (world-after-tick unpaused-2)
                (make-world (make-doodad 590 11 -10 12 "blue")
                            (make-doodad 587 439 -13 -9 "olivedrab") #false)
    "(world-after-tick unpaused-2) returned incorrect World.")
  (check-equal? (world-after-tick paused-2)
                (make-world (make-doodad 600 1 10 -12 "green")
                            (make-doodad 600 448 13 9 "gray") #true)
    "(world-after-tick paused-2) returned incorrect World.")
  (check-equal? (world-after-tick unpaused-3)
                (make-world (make-doodad 10 436 10 -12 "gold")
                            (make-doodad 313 439 13 -9 "khaki") #false)
    "(world-after-tick unpaused-3) returned incorrect World.")
  (check-equal? (world-after-tick unpaused-4)
                (make-world (make-doodad 135 132 10 12 "gold")
                            (make-doodad 313 8 13 9 "orange") #false)
    "(world-after-tick unpaused-4) returned incorrect World.")
  (check-equal? (world-after-tick unpaused-5)
                (make-world (make-doodad 135 132 10 12 "gold")
                            (make-doodad 12 234 13 9 "crimson") #false)
    "(world-after-tick unpaused-5) returned incorrect World.")
  (check-equal? (world-after-tick unpaused-6)
                (make-world (make-doodad 135 132 10 12 "gold")
                            (make-doodad 587 234 -13 9 "gray") #false)
    "(world-after-tick unpaused-6) returned incorrect World."))


;; world-after-key-event : World KeyEvent -> World
;; GIVEN: a World w and a KeyEvent kev
;; RETURNS: the World that should follow the given World
;; after the given KeyEvent.
;; on space, toggle paused?-- ignore all others
;; EXAMPLES:
;; (world-after-key-event unpaused-1 " ") = paused-1
;; (world-after-key-event paused-1 "a") = paused-1
;; (world-after-key-event paused-initial-world " ") = unpaused-initial-world
;; STRATEGY: Cases on whether the kev is a pause event

(define (world-after-key-event w kev)
  (if (is-pause-key-event? kev)
    (world-with-paused-toggled w)
    w))

;; TESTS:
(begin-for-test
  (check-equal? (world-after-key-event unpaused-1 " ") paused-1
    "(world-after-key-event unpaused-1 ' ') returned incorrect World.")
  (check-equal? (world-after-key-event paused-1 "a") paused-1
    "(world-after-key-event paused-1 'a') returned incorrect World.")
  (check-equal? (world-after-key-event paused-initial-world " ")
                unpaused-initial-world
    "(world-after-key-event paused-initial-world ' ')
    returned incorrect World."))


;; Run animation with 10x the speed.
;; (animation 0.1)
                
